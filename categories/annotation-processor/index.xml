<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Annotation Processor on Hannes Dorfmann</title>
    <link>https://localhost:1313/categories/annotation-processor/</link>
    <description>Recent content in Annotation Processor on Hannes Dorfmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jan 2015 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://localhost:1313/categories/annotation-processor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Annotation Processing 101</title>
      <link>https://localhost:1313/annotation-processing/annotationprocessing101/</link>
      <pubDate>Sat, 10 Jan 2015 10:00:00 +0100</pubDate>
      
      <guid>https://localhost:1313/annotation-processing/annotationprocessing101/</guid>
      <description>In this blog entry I would like to explain how to write an annotation processor. First, I am going to explain to you what annotation processing is, what you can do with that powerful tool and finally what you cannot do with it. In a second step we will implement a simple annotation processor step by step.</description>
    </item>
    
    <item>
      <title>AnnotatedAdapter</title>
      <link>https://localhost:1313/android/annotatedadapter/</link>
      <pubDate>Wed, 24 Sep 2014 10:00:00 +0100</pubDate>
      
      <guid>https://localhost:1313/android/annotatedadapter/</guid>
      <description>With FragmentArgs and ParcelablePlease I have already shown that Annotation Processor is really helpful to speedup development by reducing writing boilerplate code. Regarding Android I found one scenario where I find myself writing nearly the same code ever and ever again. I&amp;rsquo;m looking at you Adapter with your ViewHolders, layout inflating code and view types.</description>
    </item>
    
    <item>
      <title>ParcelablePlease</title>
      <link>https://localhost:1313/android/parcelableplease/</link>
      <pubDate>Wed, 24 Sep 2014 10:00:00 +0100</pubDate>
      
      <guid>https://localhost:1313/android/parcelableplease/</guid>
      <description>In my last blog post I have introduced FragmentArgs an Annotation Processor for Fragments that reduces writing boilerplate code. In this post I want to talk about a similar problem android developer face: Writing boilerplate code for Parcelable
 This post is part of a series of posts about useful annotation processors like FragmentArgs or AnnotatedAdapter</description>
    </item>
    
    <item>
      <title>FragmentArgs</title>
      <link>https://localhost:1313/android/fragmentargs/</link>
      <pubDate>Mon, 15 Sep 2014 10:00:00 +0100</pubDate>
      
      <guid>https://localhost:1313/android/fragmentargs/</guid>
      <description>Developing for Android is sometimes painful. You have to write lot of code to do simple things like setting up a Fragment. Fortunately java supports a powerful tool: Annotation Processors
 This post is part of a series of posts about useful annotation processors like ParcelablePlease or AnnotatedAdapter
 The Problem with Fragments is that you have to set arguments (the parameters) for a fragment to make them work correctly.</description>
    </item>
    
  </channel>
</rss>