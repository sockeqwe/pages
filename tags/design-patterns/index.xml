<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>design-patterns on Hannes Dorfmann</title>
    <link>https://hannesdorfmann.com/tags/design-patterns/</link>
    <description>Recent content in design-patterns on Hannes Dorfmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Jan 2021 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://hannesdorfmann.com/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finding the right abstraction (when working with Strings)</title>
      <link>https://hannesdorfmann.com/abstraction-text-resource/</link>
      <pubDate>Fri, 22 Jan 2021 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/abstraction-text-resource/</guid>
      <description>Finding the right abstraction is hard. In this blog post, I would like to share a technique that works well for us (my android teammates and me) when dealing with String resources on android.
An abstraction layer for Strings? Why do we even need an abstraction to simply work with Strings on Android?</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 8: Navigation</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-8/</link>
      <pubDate>Sun, 06 May 2018 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-8/</guid>
      <description>In my previous blog post we discussed how the Coordinator pattern can be applied on Android. This time I would like to show how this can be used in Model-View-Intent.
If you don&amp;rsquo;t know yet what the Coordinator pattern is I highly recommend to go back and read the introdcution.</description>
    </item>
    
    <item>
      <title>In-App Navigation with Coordinators</title>
      <link>https://hannesdorfmann.com/android/coordinators-android/</link>
      <pubDate>Sat, 05 May 2018 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/coordinators-android/</guid>
      <description>Over the last years we have established best practices for writing android apps: clean architecture, architectural patterns like MVP, MVVM, MVI, Repository pattern and so on. But what about in-app navigation? In this blog post I would like to talk about the Coordinator pattern and how we could apply this pattern in android development to organize our in-app navigation code.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 7: Timing (SingleLiveEvent problem)</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-7/</link>
      <pubDate>Wed, 13 Sep 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-7/</guid>
      <description>In my previous blog post we discussed the importance of proper state management and why I think introducing a SingleLiveEvent as discussed in Google&amp;rsquo;s Architecture Components GitHub repo is not a good idea because it just hides the real underlying problem: state management. In this blog post I would like to discuss how the problem SingleLiveEvent claims to solve can be solved with Model-View-Intent and proper state management.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 6: Restoring State</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-6/</link>
      <pubDate>Tue, 02 May 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-6/</guid>
      <description>In the previous blog posts we have discussed Model-View-Intent (MVI) and the importance of unidirectional data flow. That simplifies state restoration a lot. How and why? We will discuss that in this blog post.
There are two scenarios we will focus on in this blog post: Restoring state &amp;ldquo;in memory&amp;rdquo; (for example during screen orientation change) and restoring a &amp;ldquo;persistent state&amp;rdquo; (for example from Bundle previously saved in Activity.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 5: Debugging with ease</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-5/</link>
      <pubDate>Fri, 17 Mar 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-5/</guid>
      <description>In the previous blog posts we have discussed the Model-View-Intent (MVI) pattern and it&amp;rsquo;s characteristics. In part 1 we have talked about the importance of an unidirectional data flow and application state that is driven by the &amp;ldquo;business logic&amp;rdquo;. In this blog post we will see how this pays off when it comes to debugging to simplify the life of developers.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 4: Independent UI Components</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-4/</link>
      <pubDate>Sat, 25 Feb 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-4/</guid>
      <description>In this blog post we will discuss how to build independent UI components and clarify why Parent-Child relations are a code smell in my opinion. Furthermore, we will discuss why I think such relations are needless.
One question that arises from time to time with architectural design patterns such as Model-View-Intent, Model-View-Presenter or Model-View-ViewModel is how do Presenters (or ViewModels) communicate with each other?</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 3: State Reducer</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-3/</link>
      <pubDate>Thu, 19 Jan 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-3/</guid>
      <description>In the previous part we have discussed how to implement a simple screen with the Model-View-Intent pattern with an unidirectional data flow. In this blog post we are going to build a more complex screen with MVI with the help of a state reducer.
If you haven&amp;rsquo;t read part 2 yet, you should read that before continue with this blog post, because there is described how we connect the View via Presenter with the business logic and how data flows unidirectional.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 2: View and Intent</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-2/</link>
      <pubDate>Tue, 17 Jan 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-2/</guid>
      <description>In the first part we have discussed what a Model actually is, the relation to State and how a well defined Model can solve some common issues in android development. In this blog post we continue our journey towards &amp;ldquo;Reactive Apps&amp;rdquo; by introducing the Model-View-Intent pattern to build Reactive Apps.</description>
    </item>
    
    <item>
      <title>Reactive Apps with Model-View-Intent - Part 1: Model</title>
      <link>https://hannesdorfmann.com/android/mosby3-mvi-1/</link>
      <pubDate>Mon, 09 Jan 2017 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby3-mvi-1/</guid>
      <description>Once I have figured out that I have modeled my Model classes wrong all the time, a lot of issues and headache I previously had with some Android platform related topics are gone. Moreover, finally I was able to build Reactive Apps using RxJava and Model-View-Intent (MVI) as I never was able before although the apps I have built so far are reactive too but not on the same level of reactiveness as I&amp;rsquo;m going to describe in this blog post series.</description>
    </item>
    
    <item>
      <title>The evolution of the Repository Pattern - Be aware of over abstraction</title>
      <link>https://hannesdorfmann.com/android/from-prefabricated-house-to-lego-house/</link>
      <pubDate>Sun, 17 Jul 2016 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/from-prefabricated-house-to-lego-house/</guid>
      <description>A listener from our podcast, The Context, that Artem Zinnatullin and I run asked me, if I can give him an example of the Repository Pattern. So I googled around and stumbled upon some blog posts and found out that the term Repository Pattern is used and described in many different ways.</description>
    </item>
    
    <item>
      <title>AdapterCommands</title>
      <link>https://hannesdorfmann.com/android/adapter-commands/</link>
      <pubDate>Sun, 07 Feb 2016 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/adapter-commands/</guid>
      <description>Last week I was honored to be guest at Artem Zinnatullin&amp;rsquo;s podcast The Context where we talked about software architecture on android. In this episode I have highlighted how important a presentation model in MVP is by giving an example how to deal with RecyclerView Adapters dataset changes. Afterwards people asked me how exactly do I apply animated dataset changes and why a presentation model is helpful in this case.</description>
    </item>
    
    <item>
      <title>Joe&#39;s great adapter hell escape</title>
      <link>https://hannesdorfmann.com/android/adapter-delegates/</link>
      <pubDate>Tue, 28 Jul 2015 14:46:10 +0600</pubDate>
      
      <guid>https://hannesdorfmann.com/android/adapter-delegates/</guid>
      <description>Let me tell you a story about Joe Somebody an android developer at MyLittleZoo Inc. and how he walked through the hell while trying to create reusable RecyclerView Adapters with different view types and how he finally managed to implement reusable Adapters painlessly.
Once upon a time Joe Somebody, an android developer, was working for a young startup called MyLittleZoo Inc.</description>
    </item>
    
    <item>
      <title>Stinson&#39;s Playbook for Mosby</title>
      <link>https://hannesdorfmann.com/android/mosby-playbook/</link>
      <pubDate>Sat, 09 May 2015 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby-playbook/</guid>
      <description>In my previous blog post I introduced Mosby, a Model-View-Presenter library for android. This time I&amp;rsquo;m going to discuss some more details about MVP in general and Mosby. I have implemented a mail client sample which can be found on Github which is used in this blog entry to describe how to use Mosby and to answer some of the common questions I have been asked after having released Mosby.</description>
    </item>
    
    <item>
      <title>Ted Mosby - Software Architect</title>
      <link>https://hannesdorfmann.com/android/mosby/</link>
      <pubDate>Wed, 25 Mar 2015 10:00:00 +0100</pubDate>
      
      <guid>https://hannesdorfmann.com/android/mosby/</guid>
      <description>Ted Mosby, architect in How I met your mother (one of my favorite tv shows) was the inspiration for the name of this android library I&amp;rsquo;m going to talk about in this blog post. This library helps you to build good, robust and reusable software by implementing Model-View-Presenter pattern on android along with some nice features like ViewState for handling screen orientation changes easily.</description>
    </item>
    
  </channel>
</rss>