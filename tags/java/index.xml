<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Hannes Dorfmann</title>
    <link>http://127.0.0.1:1313/tags/java/</link>
    <description>Recent content in java on Hannes Dorfmann</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Oct 2016 10:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://127.0.0.1:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why a library developer should use abstract class instead of interface</title>
      <link>http://127.0.0.1:1313/android/library-abstract-class/</link>
      <pubDate>Thu, 13 Oct 2016 10:00:00 +0100</pubDate>
      
      <guid>http://127.0.0.1:1313/android/library-abstract-class/</guid>
      <description>Use interfaces for java development they said. It will be more flexible they said. Well, that all might be true but for library projects that doesn&amp;rsquo;t necessarily has to be true as well. In this post I will explain you why I have switched from interface to an abstract class as base class in one of my library projects called AdapterDelegates 3.</description>
    </item>
    
  </channel>
</rss>